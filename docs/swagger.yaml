definitions:
  github_com_fatihesergg_go_social_internal_dto.AllPostResponse:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      is_following:
        type: boolean
      is_liked:
        type: boolean
      total_comment:
        type: integer
      total_likes:
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/github_com_fatihesergg_go_social_internal_model.User'
    type: object
  github_com_fatihesergg_go_social_internal_dto.CommentDetailResponse:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      is_followed:
        type: boolean
      is_liked:
        type: boolean
      replies:
        items:
          $ref: '#/definitions/github_com_fatihesergg_go_social_internal_dto.ReplyResponse'
        type: array
      total_likes:
        type: integer
      total_reply:
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/github_com_fatihesergg_go_social_internal_model.User'
    type: object
  github_com_fatihesergg_go_social_internal_dto.CommentResponse:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      is_followed:
        type: boolean
      is_liked:
        type: boolean
      total_likes:
        type: integer
      total_reply:
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/github_com_fatihesergg_go_social_internal_model.User'
    type: object
  github_com_fatihesergg_go_social_internal_dto.CreateCommentDTO:
    properties:
      content:
        maxLength: 200
        type: string
      image:
        type: string
      post_id:
        type: string
    required:
    - content
    - post_id
    type: object
  github_com_fatihesergg_go_social_internal_dto.CreatePostDTO:
    properties:
      content:
        maxLength: 500
        type: string
      image:
        type: string
    required:
    - content
    type: object
  github_com_fatihesergg_go_social_internal_dto.CreateUserDTO:
    properties:
      avatar:
        type: string
      email:
        maxLength: 100
        type: string
      last_name:
        maxLength: 50
        type: string
      name:
        maxLength: 50
        type: string
      password:
        maxLength: 20
        type: string
      username:
        maxLength: 50
        type: string
    required:
    - email
    - last_name
    - name
    - password
    - username
    type: object
  github_com_fatihesergg_go_social_internal_dto.FeedResponse:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      is_following:
        type: boolean
      is_liked:
        type: boolean
      total_comment:
        type: integer
      total_likes:
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/github_com_fatihesergg_go_social_internal_model.User'
    type: object
  github_com_fatihesergg_go_social_internal_dto.LoginUserDTO:
    properties:
      email:
        maxLength: 100
        type: string
      password:
        maxLength: 20
        type: string
    required:
    - email
    - password
    type: object
  github_com_fatihesergg_go_social_internal_dto.PostDetailResponse:
    properties:
      comments:
        items:
          $ref: '#/definitions/github_com_fatihesergg_go_social_internal_dto.CommentResponse'
        type: array
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      is_following:
        type: boolean
      is_liked:
        type: boolean
      total_comment:
        type: integer
      total_likes:
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/github_com_fatihesergg_go_social_internal_model.User'
    type: object
  github_com_fatihesergg_go_social_internal_dto.ReplyResponse:
    properties:
      id:
        type: string
      message:
        type: string
      user:
        $ref: '#/definitions/github_com_fatihesergg_go_social_internal_model.User'
    type: object
  github_com_fatihesergg_go_social_internal_dto.ResetUserPasswordDTO:
    properties:
      new_password:
        maxLength: 20
        type: string
      old_password:
        maxLength: 20
        type: string
    required:
    - new_password
    - old_password
    type: object
  github_com_fatihesergg_go_social_internal_dto.UpdateCommentDTO:
    properties:
      content:
        maxLength: 200
        type: string
      image:
        type: string
    required:
    - content
    type: object
  github_com_fatihesergg_go_social_internal_dto.UpdatePostDTO:
    properties:
      content:
        maxLength: 500
        type: string
      image:
        type: string
    required:
    - content
    type: object
  github_com_fatihesergg_go_social_internal_dto.UpdateReply:
    properties:
      message:
        type: string
    type: object
  github_com_fatihesergg_go_social_internal_model.Follow:
    properties:
      follow_id:
        type: string
      user_id:
        type: string
    type: object
  github_com_fatihesergg_go_social_internal_model.User:
    properties:
      avatar:
        type: string
      id:
        type: string
      last_name:
        type: string
      name:
        type: string
      username:
        type: string
    type: object
  github_com_fatihesergg_go_social_internal_util.ErrorResponse:
    properties:
      error: {}
    type: object
  github_com_fatihesergg_go_social_internal_util.SuccessMessageResponse:
    properties:
      message:
        type: string
    type: object
  github_com_fatihesergg_go_social_internal_util.SuccessResultResponse:
    properties:
      message:
        type: string
      result: {}
    type: object
info:
  contact: {}
paths:
  /comments:
    post:
      consumes:
      - application/json
      description: Create a new comment on a post
      parameters:
      - description: Comment to create
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/github_com_fatihesergg_go_social_internal_dto.CreateCommentDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.SuccessMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a new comment
      tags:
      - Comments
  /comments/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing comment by its ID
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.SuccessMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete a comment
      tags:
      - Comments
    put:
      consumes:
      - application/json
      description: Update an existing comment by its ID
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated comment data
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/github_com_fatihesergg_go_social_internal_dto.UpdateCommentDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.SuccessMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
      security:
      - Bearer: []
      summary: Update a comment
      tags:
      - Comments
  /comments/{id}/like:
    post:
      consumes:
      - application/json
      description: Like a Comment with Comment ID
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.SuccessMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
      security:
      - Bearer: []
      summary: Like a Comment
      tags:
      - CommentLikes
  /comments/{id}/reply:
    post:
      consumes:
      - application/json
      description: Reply a comment
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.SuccessMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
      security:
      - Bearer: []
      summary: Reply a comment
      tags:
      - Reply
  /comments/{id}/unlike:
    delete:
      consumes:
      - application/json
      description: Unlike a comment with comment ID
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.SuccessMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
      security:
      - Bearer: []
      summary: Unlike a comment
      tags:
      - CommentLikes
  /comments/post/{post_id}:
    get:
      consumes:
      - application/json
      description: Retrieve all comments associated with a specific post by its ID
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.SuccessResultResponse'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/github_com_fatihesergg_go_social_internal_dto.CommentDetailResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
      security:
      - Bearer: []
      summary: Get comments for a specific post
      tags:
      - Comments
  /feed:
    get:
      consumes:
      - application/json
      description: Get feed posts for the authenticated user
      parameters:
      - default: 20
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      - description: Search query
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              allOf:
              - $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.SuccessResultResponse'
              - properties:
                  result:
                    items:
                      $ref: '#/definitions/github_com_fatihesergg_go_social_internal_dto.FeedResponse'
                    type: array
                type: object
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
      security:
      - Bearer: []
      summary: Get feed posts
      tags:
      - Feed
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token
      parameters:
      - description: User login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/github_com_fatihesergg_go_social_internal_dto.LoginUserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.SuccessMessageResponse'
            - properties:
                result:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
            - properties:
                error:
                  type: string
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
            - properties:
                error:
                  type: string
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
            - properties:
                error:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
            - properties:
                error:
                  type: string
              type: object
      summary: User login
      tags:
      - Users
  /me:
    get:
      consumes:
      - application/json
      description: Retrieve the authenticated user's details
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.SuccessResultResponse'
            - properties:
                result:
                  $ref: '#/definitions/github_com_fatihesergg_go_social_internal_model.User'
              type: object
        "401":
          description: 'Unauthorized: Invalid or missing token'
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "404":
          description: 'Not Found: User not found'
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
      security:
      - Bearer: []
      summary: Get current user
      tags:
      - Users
  /posts:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all posts with optional pagination and search
      parameters:
      - default: 20
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      - description: Search query
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              allOf:
              - $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.SuccessResultResponse'
              - properties:
                  result:
                    items:
                      $ref: '#/definitions/github_com_fatihesergg_go_social_internal_dto.AllPostResponse'
                    type: array
                type: object
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
      security:
      - Bearer: []
      summary: Get all posts
      tags:
      - Posts
    post:
      consumes:
      - application/json
      description: Create a new post with content and optional image
      parameters:
      - description: Post data
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/github_com_fatihesergg_go_social_internal_dto.CreatePostDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.SuccessMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a new post
      tags:
      - Posts
  /posts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing post by its ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.SuccessMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete a post
      tags:
      - Posts
    get:
      consumes:
      - application/json
      description: Retrieve a single post by its ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.SuccessResultResponse'
            - properties:
                result:
                  $ref: '#/definitions/github_com_fatihesergg_go_social_internal_dto.PostDetailResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
      security:
      - Bearer: []
      summary: Get a post by ID
      tags:
      - Posts
    put:
      consumes:
      - application/json
      description: Update the content and/or image of an existing post by its ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated post data
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/github_com_fatihesergg_go_social_internal_dto.UpdatePostDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.SuccessMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
      security:
      - Bearer: []
      summary: Update an existing post
      tags:
      - Posts
  /posts/{id}/like:
    post:
      consumes:
      - application/json
      description: Like a post with post ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.SuccessMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
      security:
      - Bearer: []
      summary: Like a post
      tags:
      - PostLikes
  /posts/{id}/unlike:
    delete:
      consumes:
      - application/json
      description: Unlike a post with post ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.SuccessMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
      security:
      - Bearer: []
      summary: Unlike a post
      tags:
      - PostLikes
  /replies/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a reply
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.SuccessMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete a reply
      tags:
      - Reply
    get:
      consumes:
      - application/json
      description: Get replies of a comment
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.SuccessMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
      security:
      - Bearer: []
      summary: Get replies of a comment
      tags:
      - Reply
    put:
      consumes:
      - application/json
      description: Update a reply
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      - description: Update reply
        in: body
        name: reply
        required: true
        schema:
          $ref: '#/definitions/github_com_fatihesergg_go_social_internal_dto.UpdateReply'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.SuccessMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
      security:
      - Bearer: []
      summary: Update a reply
      tags:
      - Reply
  /signup:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: User signup data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/github_com_fatihesergg_go_social_internal_dto.CreateUserDTO'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.SuccessMessageResponse'
            - properties:
                result:
                  $ref: '#/definitions/github_com_fatihesergg_go_social_internal_model.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
      summary: User signup
      tags:
      - Users
  /users/{id}/follow:
    post:
      consumes:
      - application/json
      description: Follow a user by their ID
      parameters:
      - description: User ID to follow
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.SuccessMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
      security:
      - Bearer: []
      summary: Follow a user
      tags:
      - Users
  /users/{id}/followers:
    get:
      consumes:
      - application/json
      description: Retrieve a list of followers for a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.SuccessResultResponse'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/github_com_fatihesergg_go_social_internal_model.Follow'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
      security:
      - Bearer: []
      summary: Get followers of a user by user ID
      tags:
      - Users
  /users/{id}/following:
    get:
      consumes:
      - application/json
      description: Retrieve a list of users that a specific user is following
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.SuccessResultResponse'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/github_com_fatihesergg_go_social_internal_model.Follow'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
      security:
      - Bearer: []
      summary: Get followings of a user by user ID
      tags:
      - Users
  /users/{id}/posts:
    get:
      consumes:
      - application/json
      description: Retrieve posts made by a specific user, only if the requester is
        following that user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      - description: Search query
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.SuccessResultResponse'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/github_com_fatihesergg_go_social_internal_dto.AllPostResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
      security:
      - Bearer: []
      summary: Get posts of a user by user ID
      tags:
      - Users
  /users/{id}/unfollow:
    post:
      consumes:
      - application/json
      description: Unfollow a user by their ID
      parameters:
      - description: User ID to unfollow
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.SuccessMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
      security:
      - Bearer: []
      summary: Unfollow a user
      tags:
      - Users
  /users/reset_password:
    post:
      consumes:
      - application/json
      description: Allow authenticated users to reset their password by providing
        the old and new passwords
      parameters:
      - description: Old and new passwords
        in: body
        name: passwords
        required: true
        schema:
          $ref: '#/definitions/github_com_fatihesergg_go_social_internal_dto.ResetUserPasswordDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.SuccessMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_fatihesergg_go_social_internal_util.ErrorResponse'
      security:
      - Bearer: []
      summary: Reset user password
      tags:
      - Users
securityDefinitions:
  Bearer:
    description: This is a simple social media API built with Go and Gin.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
